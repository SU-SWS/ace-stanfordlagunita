<?php

/**
 * @file
 * supress_helper.module
 */

use Drupal\Component\Utility\SortArray;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Installer\InstallerKernel;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Site\Settings;
use Drupal\media\MediaInterface;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;
use Drupal\search_api\IndexInterface;

/**
 * Implements hook_page_attachments().
 */
function supress_helper_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'supress_helper/admin';
}

/**
 * Implements hook_library_info_alter().
 */
function supress_helper_library_info_alter(&$libraries, $extension) {
  if ($extension === 'ckeditor5') {
    $module_path = \Drupal::service('extension.list.module')->getPath('supress_helper');
    $libraries['internal.drupal.ckeditor5.stylesheets'] = [
      'css' => [
        'theme' => [
          "/$module_path/styles/dist/css/ckeditor.css" => [],
        ],
      ],
    ];
  }
}

/**
 * Implements hook_paragraphs_behavior_info_alter().
 */
function supress_helper_paragraphs_behavior_info_alter(&$paragraphs_behavior) {
  $paragraphs_behavior['su_card_styles']['class'] = '\Drupal\supress_helper\Plugin\paragraphs\Behavior\PressCardBehaviors';
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function supress_helper_media_access(MediaInterface $media, $operation, AccountInterface $account) {
  $route = \Drupal::routeMatch()->getRouteName();
  return AccessResult::forbiddenIf($route != 'graphql.query.graphql_compose_server' && $media->bundle() == 'sup_protected_file' && $account->isAnonymous());
}

/**
 * Implements hook_cron().
 */
function supress_helper_cron() {
  /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  $queue = $queue_factory->get('press_cover_downloader');

  $token = _supress_helper_get_api_token();
  if (!$token && $queue->numberOfItems() > 0) {
    return;
  }

  $client = \Drupal::httpClient();

  // Post a query to find the covers that are flagged to be updated. The API
  // is slow to respond so limiting to only 100 items will make it more
  // reliable.
  try {
    $covers_response = (string) $client->request('POST', 'https://memento.stanford.edu/fmi/data/v2/databases/Web/layouts/Covers/_find?_limit=100', [
      'headers' => [
        'Content-Type' => 'application/json',
        'Authorization' => 'Bearer ' . $token,
      ],
      'body' => json_encode(['query' => [['flag' => '=x']]]),
      'timeout' => 60,
    ])->getBody();
  }
  catch (\Exception $e) {
    // When there are no covers that match, the response is a 500 "error" even
    // though it should actually be a 204. Only log when the message doesn't
    // mention "no records".
    if (!str_contains($e->getMessage(), 'No records match the request')) {
      throw $e;
    }
    return;
  }

  // Create a cron queue task for each cover.
  $covers = json_decode($covers_response, TRUE, 512, JSON_THROW_ON_ERROR);
  foreach ($covers['response']['data'] as $cover) {
    $queue->createItem($cover['recordId']);
  }
}

/**
 * Get the filemaker api token.
 *
 * @return string|false
 *   Token or false and any failure.
 */
function _supress_helper_get_api_token(): string|false {
  $cache = \Drupal::cache();
  if ($cached_item = $cache->get('filemaker_api_token')) {
    return $cached_item->data;
  }
  $config_page_loader = \Drupal::service('config_pages.loader');
  $client_id = $config_page_loader->getValue('stanford_basic_site_settings', 'sup_filemaker_user', 0, 'value');
  $client_secret = $config_page_loader->getValue('stanford_basic_site_settings', 'sup_filemaker_pass', 0, 'value');

  if (
    !$client_id ||
    !$client_secret ||
    InstallerKernel::installationAttempted()
  ) {
    return FALSE;
  }

  try {
    $client = \Drupal::httpClient();
    // Grab the OAuth-like token from the api.
    $token_response = $client->request('POST', 'https://memento.stanford.edu/fmi/data/v2/databases/Web/sessions', [
      'headers' => ['Content-Type' => 'application/json'],
      'auth' => [$client_id, $client_secret],
    ]);
    $token = json_decode((string) $token_response->getBody(), TRUE, 512, JSON_THROW_ON_ERROR);
    $token = $token['response']['token'];
    $cache->set('filemaker_api_token', $token, time() + 60 * 5);
    return $token;
  }
  catch (\Exception $e) {
    return FALSE;
  }
}

/**
 * Implements hook_search_api_algolia_objects_alter().
 */
function supress_helper_search_api_algolia_objects_alter(array &$objects, IndexInterface $index, array $items) {
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  foreach ($objects as &$object) {
    // Useful to limit record data for local algolia testing.
    if (Settings::get('algolia_limit_record')) {
      $object['html'] = implode(' ', array_slice(explode(' ', $object['html'] ?? ''), 0, 10));
    }

    if (isset($object['book_subject'])) {
      $object['book_subject'] = is_array($object['book_subject']) ? $object['book_subject'] : [$object['book_subject']];
      $all_subjects = [];

      foreach ($object['book_subject'] as &$term_id) {
        $term = $term_storage->load($term_id);
        $all_subjects[] = $term->label();
        while ($parent = $term_storage->loadParents($term_id)) {
          $term = reset($parent);
          $all_subjects[] = $term->label();
          $term_id = $term->id();
        }
        $term_id = $term->label();
      }

      asort($all_subjects);
      asort($object['book_subject']);
      $object['book_subject_all'] = $all_subjects;
      $object['book_subject'] = array_values(array_unique($object['book_subject']));
    }
  }
}

/**
 * Implements hook_entity_create_access().
 */
function supress_helper_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  // Disable the banner paragraph type.
  return AccessResult::forbiddenIf($entity_bundle == 'stanford_banner');
}

/**
 * Implements hook_field_widget_complete_WIDGET_TYPE_form_alter().
 */
function supress_helper_field_widget_complete_options_select_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context) {
  if ($context['items']->getName() == 'sup_search_subject') {
    // Only show the top level terms and the "None" option.
    $field_widget_complete_form['widget']['#options'] = array_filter($field_widget_complete_form['widget']['#options'], fn($option) => !str_starts_with($option, '-') || $option == '- None -');
  }
}

/**
 * Implements hook_migrate_prepare_row().
 */
function supress_helper_migrate_sup_import_books_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $row->setSourceProperty('current_feed_url', NULL);
  $id_map = $row->getIdMap();
  if (!isset($id_map['sourceid1'])) {
    return;
  }
  $retailers = _supress_get_ebook_retailers();
  $retailers = array_filter($retailers, fn($retailer) => (int) $retailer['work_id_number'] == (int) $id_map['sourceid1']);
  uasort($retailers, [SortArray::class, 'sortByTitleElement']);
  $row->setSourceProperty('ebook_retailers', array_values($retailers));
}

/**
 * Get the list of all ebooks from the FileMaker API.
 *
 * @return array
 *   Array of retailer data.
 */
function _supress_get_ebook_retailers() {
  $cache = \Drupal::cache();
  if ($cached_item = $cache->get('filemaker_ebook_retailers')) {
    return $cached_item->data;
  }

  $token = _supress_helper_get_api_token();
  if (!$token) {
    return [];
  }

  $client = \Drupal::httpClient();
  $fetch_more = TRUE;
  $page = 0;
  $retailers = [];

  while ($fetch_more) {
    $limit = 10000;
    $offset = ($page * $limit) + 1;
    $ebook_retailers_page = (string) $client->request('GET', "https://memento.stanford.edu/fmi/data/v2/databases/Web/layouts/EbookRetailers/records?_limit=$limit&_offset=$offset", [
      'headers' => [
        'Content-Type' => 'application/json',
        'Authorization' => 'Bearer ' . $token,
      ],
      'body' => json_encode(['query' => [['flag' => '=x']]]),
      'timeout' => 60,
    ])->getBody();
    $ebook_retailers_page = json_decode($ebook_retailers_page, TRUE);

    foreach ($ebook_retailers_page['response']['data'] as $record) {
      $retailers[] = [
        'work_id_number' => $record['fieldData']['work_id_number'],
        'title' => $record['fieldData']['retailer'],
        'uri' => $record['fieldData']['link'],
      ];
    }
    $fetch_more = $ebook_retailers_page['response']['dataInfo']['returnedCount'] == $limit;
    $page++;
  }

  $cache->set('filemaker_ebook_retailers', $retailers, time() + 60 * 60 * 24 * 7);
  return $retailers;
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function supress_helper_field_widget_single_element_viewfield_select_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  $element['view_options']['helper'] = [
    '#type' => 'container',
    'help_text' => [
      '#markup' => t('Book view arguments should be constructed like %subject/%series/%tags/%imprints/%work. To skip an argument, provide an empty quotes: "".', [
        '%subject' => 'subject-term-names',
        '%series' => 'series-term-names',
        '%tags' => 'book-tag-names',
        '%imprints' => 'book-imprint-names',
        '%work' => 'work+id+numbers',
      ]),
    ],
    '#weight' => 21,
    '#states' => [
      'visible' => [
        '[name="su_list_view[0][target_id]"]' => ['value' => 'sup_books'],
      ],
    ],
  ];
}
