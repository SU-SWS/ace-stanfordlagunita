<?php

/**
 * @file
 * Primary module hooks for SUL Helper module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;

/**
 * Implements hook_paragraphs_behavior_info_alter().
 */
function sul_helper_paragraphs_behavior_info_alter(&$paragraphs_behavior) {
  $paragraphs_behavior['su_card_styles']['class'] = '\Drupal\sul_helper\Plugin\paragraphs\Behavior\SuCardStylesBehaviors';
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function sul_helper_paragraph_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return AccessResult::forbiddenIf($entity_bundle == 'stanford_gallery');
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function sul_helper_ckeditor_css_alter(array &$css) {
  $module_path = \Drupal::service('extension.list.module')
    ->getPath('sul_helper');
  $css[] = "$module_path/css/wysiwyg.css";
}

/**
 * Implements hook_library_info_alter().
 */
function sul_helper_library_info_alter(&$libraries, $extension) {
  if ($extension == 'layout_paragraphs') {
    $libraries['builder']['dependencies'][] = 'sul_helper/layout_paragraphs';
  }
  if ($extension == 'node') {
    $libraries['drupal.node']['dependencies'][] = 'sul_helper/node_form';
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function sul_helper_field_widget_viewfield_select_form_alter(&$element, FormStateInterface $form_state, $context) {
  $element['view_options']['arguments']['#title'] = t('Filtering Arguments (taxonomy terms)');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sul_helper_preprocess_paragraph__stanford_spacer(&$variables) {
  // Copied from stanford_basic theme.
  $paragraph = $variables['elements']['#paragraph'];
  if ($paragraph->hasField('su_spacer_size') && !$paragraph->get('su_spacer_size')
      ->isEmpty()) {
    $variables['attributes']['class'][] = $paragraph->get('su_spacer_size')
      ->getString();
  }
}

/**
 * Implements hook_graphql_compose_field_type_alter().
 */
function sul_helper_graphql_compose_field_type_alter(array &$field_types) {
  $field_types['link']['class'] = 'Drupal\sul_helper\Plugin\GraphQLCompose\FieldType\SulLinkItem';
}

/**
 * Implements hook_graphql_compose_graphql_type_alter().
 */
function sul_helper_graphql_compose_graphql_type_alter(array &$entity_types) {
  $entity_types['Link']['class'] = 'Drupal\sul_helper\Plugin\GraphQLCompose\SchemaType\SulLinkType';
}

/**
 * Implements hook_migrate_prepare_row().
 *
 * On the person importer, we have a process plugin that sets the libcal and
 * libguide id numbers for each piece of content. Since that data comes from a
 * source other than the migration itself, we have to add some cache
 * invalidation mechanism so that the content will be updated on the next
 * migration run. This could be a new calendar or guide. By setting the source
 * data with the value, the migration module will use that to generate the
 * hash of the source data. If the guides or the calendar change, a new hash
 * will be created, and in turn will update the piece of content.
 */
function sul_helper_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  if ($migration->id() == 'su_stanford_person') {
    /** @var \Drupal\sul_helper\SulServiceInterface $sul_service */
    $sul_service = \Drupal::service('sul_helper.sul_service');
    $guides = $sul_service->getLibGuides();
    $source_data = $row->getSource();
    $emails = [
      $source_data['sunetid'] . '@stanford.edu',
      $source_data['alias'] . '@stanford.edu',
      $source_data['sunetid'] . '@law.stanford.edu',
      $source_data['alias'] . '@law.stanford.edu',
    ];
    $guides = array_filter($guides, function($guide) use ($emails) {
      return in_array($guide['owner']['email'], $emails);
    });
    // Use only the following properties to determine if the cache is different.
    $guides = array_map(fn($guide) => [
      'id' => $guide['id'],
      'name' => $guide['name'],
      'friendly_url' => $guide['friendly_url'],
    ], $guides);
    uasort($guides, fn($a, $b) => $a['id'] < $b['id'] ? -1 : 1);
    $row->setSourceProperty('libguides', array_values($guides));

    $calendars = $sul_service->getLibCalUsers();
    $calendars = array_filter($calendars, function($cal_user) use ($emails) {
      return in_array($cal_user['email'], $emails);
    });
    // Calendars don't have any data that could update, so only need the ID.
    $calendars = array_map(fn($cal) => $cal['id'], $calendars);
    asort($calendars);
    $row->setSourceProperty('libcal', array_values($calendars));
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function sul_helper_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  if (!$node->hasField('layout_selection')) {
    return;
  }
  if ($node->bundle() == 'stanford_page') {
    // Need to handle the basic page differently due to stanford_profile_helper
    // hooks moving things around.
    $form["#process"][] = '_sul_helper_basic_page_node_form_process';
  }
  $form["#process"][] = '_sul_helper_node_form_process';
}

/**
 * Process callback to adjust node form rendering.
 *
 * @param array $form
 *   Complete form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Current form state.
 *
 * @return array
 *   Modified form.
 */
function _sul_helper_node_form_process(array $form, FormStateInterface &$form_state) {
  $form['advanced']['#type'] = 'vertical_tabs';
  $form['#attached']['library'][] = 'stanford_layout_paragraphs/layout_paragraphs';

  if (isset($form['meta'])) {
    $form['meta']['#type'] = 'details';
    $form['meta']['#title'] = t('Publishing Information');
  }
  return $form;
}

/**
 * Process callback to adjust node form rendering.
 *
 * @param array $form
 *   Complete form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Current form state.
 *
 * @return array
 *   Modified form.
 */
function _sul_helper_basic_page_node_form_process(array $form, FormStateInterface &$form_state) {
  $form['layout_selection']['rel_links'] = [
    '#type' => 'container',
    'sul_rel_links' => $form['sul_rel_links'],
    'sul_rel_links_heading' => $form['sul_rel_links_heading'],
    '#states' => [
      'visible' => [
        ':input[name="layout_selection"]' => ['value' => 'sul_side_nav'],
      ],
    ],
  ];
  unset($form['sul_rel_links'], $form['sul_rel_links_heading']);
  return $form;
}

/**
 * Implements hook_field_widget_complete_form_alter().
 */
function sul_helper_field_widget_complete_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context) {
  if ($context['items']->getName() == 'layout_selection') {
    $none_label = t('Main navigation sidebar');
    $field_widget_complete_form['widget']['#options']['_none'] = $none_label;
  }
}
