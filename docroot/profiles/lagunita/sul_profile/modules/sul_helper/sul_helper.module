<?php

/**
 * @file
 * Primary module hooks for SUL Helper module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_paragraphs_behavior_info_alter().
 */
function sul_helper_paragraphs_behavior_info_alter(&$paragraphs_behavior) {
  $paragraphs_behavior['su_card_styles']['class'] = '\Drupal\sul_helper\Plugin\paragraphs\Behavior\SuCardStylesBehaviors';
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function sul_helper_paragraph_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return AccessResult::forbiddenIf($entity_bundle == 'stanford_gallery');
}

/**
 * Implements hook_entity_type_alter().
 */
function sul_helper_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['paragraph']->setLinkTemplate('canonical', '/admin/paragraph/{paragraph}');
  $entity_types['paragraph']->setHandlerClass('route_provider', ['html' => '\Drupal\Core\Entity\Routing\AdminHtmlRouteProvider']);
}

/**
 * Implements hook_next_site_preview_alter().
 */
function sul_helper_next_site_preview_alter(array &$preview, array $context) {
  $accepted_previews = ['node', 'paragraph'];
  if (!in_array($context['entity']->getEntityTypeid(), $accepted_previews)) {
    $preview = $context['original_build'][0]['content'];
  }
}

/**
 * Implements hook_entity_display_build_alter().
 */
function sul_helper_entity_display_build_alter(&$build, $context) {
  $current_route = \Drupal::routeMatch()->getRouteName();
  $allowed_routes = [
    'layout_paragraphs.builder.insert',
    'layout_paragraphs.builder.edit_item',
    'entity.node.edit_form',
  ];

  if (!in_array($current_route, $allowed_routes) || !($context['entity'] instanceof ParagraphInterface)) {
    return;
  }
  \Drupal::service('sul_helper.jsonapi_serializer')
    ->alterEntityBuild($build, $context['entity'], $context['display']);
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function sul_helper_ckeditor_css_alter(array &$css) {
  $module_path = \Drupal::service('extension.list.module')
    ->getPath('sul_helper');
  $css[] = "$module_path/css/wysiwyg.css";
}

/**
 * Implements hook_library_info_alter().
 */
function sul_helper_library_info_alter(&$libraries, $extension) {
  if ($extension == 'layout_paragraphs') {
    $libraries['builder']['dependencies'][] = 'sul_helper/layout_paragraphs';
  }
  if ($extension == 'node') {
    $libraries['drupal.node']['dependencies'][] = 'sul_helper/node_form';
  }
}
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function sul_helper_field_widget_viewfield_select_form_alter(&$element, FormStateInterface $form_state, $context) {
  $element['view_options']['arguments']['#title'] = t('Filtering Arguments (taxonomy terms)');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sul_helper_preprocess_paragraph__stanford_spacer(&$variables) {
  // Copied from stanford_basic theme.
  $paragraph = $variables['elements']['#paragraph'];
  if ($paragraph->hasField('su_spacer_size') && !$paragraph->get('su_spacer_size')->isEmpty()) {
    $variables['attributes']['class'][] = $paragraph->get('su_spacer_size')->getString();
  }
}

/**
 * Implements hook_graphql_compose_field_type_alter().
 */
function sul_helper_graphql_compose_field_type_alter(array &$field_types) {
  $field_types['link']['class'] = 'Drupal\sul_helper\Plugin\GraphQLCompose\FieldType\SulLinkItem';
}

/**
 * Implements hook_graphql_compose_graphql_type_alter().
 */
function sul_helper_graphql_compose_graphql_type_alter(array &$entity_types) {
  $entity_types['Link']['class'] = 'Drupal\sul_helper\Plugin\GraphQLCompose\SchemaType\SulLinkType';
}

/**
 * Implements hook_migrate_prepare_row().
 *
 * On the person importer, we have a process plugin that sets the libcal and
 * libguide id numbers for each piece of content. Since that data comes from a
 * source other than the migration itself, we have to add some cache
 * invalidation mechanism so that the content will be updated on the next
 * migration run. This could be a new calendar or guide. By setting the source
 * data with the value, the migration module will use that to generate the
 * hash of the source data. If the guides or the calendar change, a new hash
 * will be created, and in turn will update the piece of content.
 */
function sul_helper_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  if ($migration->id() == 'su_stanford_person') {
    /** @var \Drupal\sul_helper\SulServiceInterface $sul_service */
    $sul_service = \Drupal::service('sul_helper.sul_service');
    $guides = $sul_service->getLibGuides();
    $source_data = $row->getSource();
    $emails = [
      $source_data['sunetid'] . '@stanford.edu',
      $source_data['alias'] . '@stanford.edu',
      $source_data['sunetid'] . '@law.stanford.edu',
      $source_data['alias'] . '@law.stanford.edu',
    ];
    $guides = array_filter($guides, function($guide) use ($emails) {
      return in_array($guide['owner']['email'], $emails);
    });
    // Use only the following properties to determine if the cache is different.
    $guides = array_map(fn($guide) => [
      'id' => $guide['id'],
      'name' => $guide['name'],
      'friendly_url' => $guide['friendly_url'],
    ], $guides);
    uasort($guides, fn($a, $b) => $a['id'] < $b['id'] ? -1 : 1);
    $row->setSourceProperty('libguides', array_values($guides));

    $calendars = $sul_service->getLibCalUsers();
    $calendars = array_filter($calendars, function($cal_user) use ($emails) {
      return in_array($cal_user['email'], $emails);
    });
    // Calendars don't have any data that could update, so only need the ID.
    $calendars = array_map(fn($cal) => $cal['id'], $calendars);
    asort($calendars);
    $row->setSourceProperty('libcal', array_values($calendars));
  }
}
