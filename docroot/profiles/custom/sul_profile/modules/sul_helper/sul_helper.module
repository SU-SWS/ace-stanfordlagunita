<?php

/**
 * @file
 * Primary module hooks for SUL Helper module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Template\Attribute;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function sul_helper_paragraph_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return AccessResult::forbiddenIf($entity_bundle == 'stanford_gallery');
}

/**
 * Implements hook_entity_type_alter().
 */
function sul_helper_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['paragraph']->setLinkTemplate('canonical', '/admin/paragraph/{paragraph}');
  $entity_types['paragraph']->setHandlerClass('route_provider', ['html' => '\Drupal\Core\Entity\Routing\AdminHtmlRouteProvider']);
}

/**
 * Implements hook_entity_field_access_alter().
 */
function sul_helper_entity_field_access_alter(array &$grants, array $context) {
  $field_definition = $context['field_definition'];
  if ($field_definition->getName() == 'layout_selection' && $context['operation'] == 'view'){
    unset($grants['stanford_profile_helper']);
  }
}
/**
 * Implements hook_entity_display_build_alter().
 */
function sul_helper_entity_display_build_alter(&$build, $context) {
  if (!($context['entity'] instanceof ParagraphInterface)) {
    return;
  }
  \Drupal::service('sul_helper.jsonapi_serializer')->alterEntityBuild($build, $context['entity'], $context['display']);
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function sul_helper_ckeditor_css_alter(array &$css) {
  $module_path = \Drupal::service('extension.list.module')
    ->getPath('sul_helper');
  $css[] = "$module_path/css/wysiwyg.css";
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sul_helper_preprocess_image(&$variables) {
  if (empty($variables['width']) || empty($variables['height'])) {
    $path = str_starts_with($variables['uri'], '/') ? DRUPAL_ROOT . $variables['uri'] : $variables['uri'];
    $path = preg_replace('/\?.*$/', '', $path);
    if ($size = @getimagesize($path)) {
      $variables['attributes']['width'] = $size[0];
      $variables['attributes']['height'] = $size[1];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sul_helper_preprocess_file_link(&$variables) {
  $variables['link']['#url']->setAbsolute();
}

/**
 * Implements hook_library_info_alter().
 */
function sul_helper_library_info_alter(&$libraries, $extension) {
  if ($extension == 'layout_paragraphs') {
    $libraries['builder']['dependencies'][] = 'sul_helper/layout_paragraphs';
  }
  if ($extension == 'node') {
    $libraries['drupal.node']['dependencies'][] = 'sul_helper/node_form';
  }
}

/**
 * Implements hook_theme().
 */
function sul_helper_theme($existing, $type, $theme, $path) {
  // Duplicate the patterns_use_wrapper theme. We can modify it to work with
  // layout paragraphs.
  return ['patterns_use_wrapper_admin' => ['variables' => ['use' => NULL]]];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function sul_helper_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if (
    strpos($hook, 'pattern_') === 0 &&
    strpos($hook, 'pattern_view') === FALSE &&
    _sul_helper_is_editing_layout_paragraphs()
  ) {
    // Add the theme suggestion when we're editing layout builder components.
    $suggestions[] = 'patterns_use_wrapper_admin';
  }
}

/**
 * Implements hook_preprocess().
 */
function sul_helper_preprocess(&$variables, $hook) {
  // If not editing LP page, we don't want to do anything.
  if (!_sul_helper_is_editing_layout_paragraphs()) {
    return;
  }

  // Remove any contextual links on the media/paragraphs/other entities when
  // editing the layout paragraphs page.
  if (!empty($variables['elements']['#entity_type'])) {
    unset($variables['title_suffix']['contextual_links']);
  }

  // Manipulate the render array for the entity view so that we can pick it up
  // in the later hook on the pattern.
  if ($hook == 'ds_entity_view') {
    // Between this hook and the pattern hook, the id attribute changes somehow,
    // so store the attributes into the context so that we can grab them later
    // and apply them to the wrapper.
    $variables['content']['#context']['lpBuilder'] = $variables['attributes'];
    unset($variables['attributes']);
  }

  if (strpos($hook, 'pattern_') === 0 && !empty($variables['context'])) {

    // Grab the layout paragraphs parts from the context that we saved above,
    // and put them into a variable for use in the patterns_use_wrapper_admin
    // template. Also remove the normal attributes to a wrapper so that they
    // don't somehow get passed down into the pattern and cause chaos.
    $wrapper_attributes = $variables['context']->getProperty('lpBuilder') ?? [];
    $variables['wrapper_attributes'] = new Attribute($wrapper_attributes);
    $variables['attributes'] = new Attribute();
  }
}

/**
 * Implements hook_ckeditor_plugin_info_alter().
 */
function sul_helper_ckeditor_plugin_info_alter(array &$plugins) {
  unset($plugins['fixed_toolbar']);
}

/**
 * Is the user currently on editing the layout paragraphs?
 *
 * @return bool
 *   True if the route matches known routes for LP.
 */
function _sul_helper_is_editing_layout_paragraphs() {
  $layout_paragraphs_routes = ['entity.node.edit_form'];
  $route_name = \Drupal::routeMatch()->getRouteName();
  return in_array($route_name, $layout_paragraphs_routes) || strpos($route_name, 'layout_paragraphs.') === 0;
}
