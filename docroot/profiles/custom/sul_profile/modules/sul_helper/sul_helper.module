<?php

/**
 * @file
 * Primary module hooks for SUL Helper module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function sul_helper_paragraph_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return AccessResult::forbiddenIf($entity_bundle == 'stanford_gallery');
}

/**
 * Implements hook_entity_type_alter().
 */
function sul_helper_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['paragraph']->setLinkTemplate('canonical', '/admin/paragraph/{paragraph}');
  $entity_types['paragraph']->setHandlerClass('route_provider', ['html' => '\Drupal\Core\Entity\Routing\AdminHtmlRouteProvider']);
}

/**
 * Implements hook_next_site_preview_alter().
 */
function sul_helper_next_site_preview_alter(array &$preview, array $context) {
  $accepted_previews = ['node', 'paragraph'];
  if (!in_array($context['entity']->getEntityTypeid(), $accepted_previews)) {
    $preview = $context['original_build'][0]['content'];
  }
}

/**
 * Implements hook_entity_display_build_alter().
 */
function sul_helper_entity_display_build_alter(&$build, $context) {
  $current_route = \Drupal::routeMatch()->getRouteName();
  $allowed_routes = [
    'layout_paragraphs.builder.insert',
    'layout_paragraphs.builder.edit_item',
    'entity.node.edit_form',
  ];

  if (!in_array($current_route, $allowed_routes) || !($context['entity'] instanceof ParagraphInterface)) {
    return;
  }
  \Drupal::service('sul_helper.jsonapi_serializer')
    ->alterEntityBuild($build, $context['entity'], $context['display']);
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function sul_helper_ckeditor_css_alter(array &$css) {
  $module_path = \Drupal::service('extension.list.module')
    ->getPath('sul_helper');
  $css[] = "$module_path/css/wysiwyg.css";
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sul_helper_preprocess_image(&$variables) {
  if (empty($variables['width']) || empty($variables['height'])) {
    $path = str_starts_with($variables['uri'], '/') ? DRUPAL_ROOT . $variables['uri'] : $variables['uri'];
    $path = preg_replace('/\?.*$/', '', $path);
    if ($size = @getimagesize($path)) {
      $variables['attributes']['width'] = $size[0];
      $variables['attributes']['height'] = $size[1];
    }
  }
}

/**
 * Implements hook_library_info_alter().
 */
function sul_helper_library_info_alter(&$libraries, $extension) {
  if ($extension == 'layout_paragraphs') {
    $libraries['builder']['dependencies'][] = 'sul_helper/layout_paragraphs';
  }
  if ($extension == 'node') {
    $libraries['drupal.node']['dependencies'][] = 'sul_helper/node_form';
  }
}
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function sul_helper_field_widget_viewfield_select_form_alter(&$element, FormStateInterface $form_state, $context) {
  $element['view_options']['arguments']['#title'] = t('Filtering Arguments (taxonomy terms)');
}
